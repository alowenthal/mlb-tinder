{"ast":null,"code":"var _jsxFileName = \"/Users/adam.lowenthal/Sites/hackathon/mlb-tinder/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport csv from 'csv-parser';\nimport { players } from './data/players';\nimport Cards from './Cards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  transition: opacity 0.1s ease-in-out;\n`;\n_c = AppContainer;\n\nfunction App() {\n  _s();\n\n  const [available, setAvailable] = useState([...players]);\n  const [mySelections, setMySelections] = useState([]);\n  fetch(\"https://spreadsheets.google.com/feeds/cells/1uA4DvmZ3UXF7K9rjS1L1RKaQd8LE298EEZ-oUvm1WO4/1/public/full?alt=json\").then(res => res.json()).then(json => {\n    const data = [];\n    /* this array will eventually be populated with the contents of the spreadsheet's rows */\n\n    const rows = json.feed.entry;\n\n    for (const row of rows) {\n      const formattedRow = {};\n\n      for (const key in row) {\n        if (key.startsWith(\"gsx$\")) {\n          /* The actual row names from your spreadsheet\n           * are formatted like \"gsx$title\".\n           * Therefore, we need to find keys in this object\n           * that start with \"gsx$\", and then strip that\n           * out to get the actual row name\n           */\n          formattedRow[key.replace(\"gsx$\", \"\")] = row[key].$t;\n        }\n      }\n\n      data.push(formattedRow);\n    }\n\n    console.log('***', data);\n    /* do anything you want with the reformatted data here */\n  });\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: /*#__PURE__*/_jsxDEV(Cards, {\n      available: available,\n      setAvailable: setAvailable,\n      mySelections: mySelections,\n      setMySelections: setMySelections\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"TBuD06bTHQuCErYhp8uDZvhDBZc=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/adam.lowenthal/Sites/hackathon/mlb-tinder/src/App.js"],"names":["React","useState","styled","csv","players","Cards","AppContainer","div","App","available","setAvailable","mySelections","setMySelections","fetch","then","res","json","data","rows","feed","entry","row","formattedRow","key","startsWith","replace","$t","push","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,YAAY,GAAGJ,MAAM,CAACK,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;KAAMD,Y;;AAUN,SAASE,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,CAAC,GAAGG,OAAJ,CAAD,CAA1C;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,EAAD,CAAhD;AAEAY,EAAAA,KAAK,CAAC,iHAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEME,IAAI,IAAI;AACZ,UAAMC,IAAI,GAAG,EAAb;AAAgB;;AAEhB,UAAMC,IAAI,GAAGF,IAAI,CAACG,IAAL,CAAUC,KAAvB;;AAEA,SAAI,MAAMC,GAAV,IAAiBH,IAAjB,EAAuB;AACrB,YAAMI,YAAY,GAAG,EAArB;;AAEA,WAAI,MAAMC,GAAV,IAAiBF,GAAjB,EAAsB;AACpB,YAAGE,GAAG,CAACC,UAAJ,CAAe,MAAf,CAAH,EAA2B;AAEzB;AACV;AACA;AACA;AACA;AACA;AAEUF,UAAAA,YAAY,CAACC,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,EAApB,CAAD,CAAZ,GAAwCJ,GAAG,CAACE,GAAD,CAAH,CAASG,EAAjD;AAED;AACF;;AAEDT,MAAAA,IAAI,CAACU,IAAL,CAAUL,YAAV;AACD;;AAEDM,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBZ,IAAnB;AAAyB;AAC1B,GA7BD;AA+BA,sBACE,QAAC,YAAD;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,SAAS,EAAER,SAAlB;AAA6B,MAAA,YAAY,EAAEC,YAA3C;AAAyD,MAAA,YAAY,EAAEC,YAAvE;AAAqF,MAAA,eAAe,EAAEC;AAAtG;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAxCQJ,G;;MAAAA,G;AA0CT,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport csv from 'csv-parser';\nimport { players } from './data/players';\nimport Cards from './Cards';\n\nconst AppContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  transition: opacity 0.1s ease-in-out;\n`;\n\nfunction App() {\n  const [available, setAvailable] = useState([...players]);\n  const [mySelections, setMySelections] = useState([]);\n\n  fetch(\"https://spreadsheets.google.com/feeds/cells/1uA4DvmZ3UXF7K9rjS1L1RKaQd8LE298EEZ-oUvm1WO4/1/public/full?alt=json\")\n  .then(res => res.json())\n  .then(json => {\n    const data = [] /* this array will eventually be populated with the contents of the spreadsheet's rows */\n\n    const rows = json.feed.entry\n\n    for(const row of rows) {\n      const formattedRow = {}\n\n      for(const key in row) {\n        if(key.startsWith(\"gsx$\")) {\n\n          /* The actual row names from your spreadsheet\n           * are formatted like \"gsx$title\".\n           * Therefore, we need to find keys in this object\n           * that start with \"gsx$\", and then strip that\n           * out to get the actual row name\n           */\n\n          formattedRow[key.replace(\"gsx$\", \"\")] = row[key].$t\n\n        }\n      }\n\n      data.push(formattedRow)\n    }\n\n    console.log('***', data) /* do anything you want with the reformatted data here */\n  })\n\n  return (\n    <AppContainer>\n      <Cards available={available} setAvailable={setAvailable} mySelections={mySelections} setMySelections={setMySelections} />\n    </AppContainer>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}